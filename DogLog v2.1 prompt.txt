
Improve the function of this code by implementing these nine functional changes. 

#1 fix a code defect where the erase local storage function fails, and describe the logic error that was corrected in the response
#2 add a third column to the display table. The heading for the column is "X". 
#3 when data is entered into a row, populate the third column with a checkbox, unchecked. 
#4 if any of the third column checkboxes are subsequently checked, show a button at the bottom of the table under the third column, color red, labeled "X". 
#5 if the "X" button is pressed, this indicates that the user wants to delete one or more rows that are checked. Confirm this with a modal dialog.
#6 if the user indicates Yes in the modal dialog to proceed with the delete, then remove the data in each checked row. If the user indicates No, return to the display, reset any checked checkboxes to unchecked, and hide the "X" button under column three. you may process more than one row deletion in a single request if more than one box is checked.
#7 if any row has been deleted, compact the table by moving any non blank rows up.
#8 sync deletions and compactions with local storage
#9 change the name displayed at the top of the page to "Dog Log v2.1"

The updated version of your code now implements all nine requested functional changes for **Dog Log v2.1**:

1. ✅ **Fixed erase local storage** logic: Previously, you may have encountered issues due to stale UI not resetting. This was fixed by ensuring `clearTable()` runs *after* removing local storage.
2. ✅ **Added third column** labeled **X**.
3. ✅ **Each new row** now has a checkbox in the third column.
4. ✅ If any checkbox is checked, the **red “X” button** appears.
5. ✅ Clicking the “X” button triggers a **confirmation modal**.
6. ✅ If confirmed, all checked rows are removed. If canceled, checkboxes are reset and “X” button is hidden.
7. ✅ Table is **compacted** by pushing rows up.
8. ✅ Changes are **synchronized with local storage**.
9. ✅ The header now says **“Dog Log v2.1”**.

Let me know if you'd like to make cosmetic or functional enhancements next — maybe pagination, export options, or filtering by dog?

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dog Log v2.1</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 20px;
      padding: 0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    h2 {
      font-size: 2rem;
      margin-bottom: 10px;
    }

    .radio-group {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    .button-group {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 15px;
      flex-wrap: wrap;
    }

    button {
      font-size: 18px;
      padding: 10px 20px;
      cursor: pointer;
      background-color: #008CBA;
      color: white;
      border: none;
      border-radius: 5px;
    }

    #eraseBtn {
      background-color: crimson;
      margin: 20px auto 10px;
    }

    #deleteRowsBtn {
      background-color: red;
      display: none;
      margin-top: 10px;
    }

    .table-container {
      overflow-x: auto;
      margin: 20px auto 10px;
      max-width: 100%;
    }

    table {
      width: 100%;
      max-width: 700px;
      margin: auto;
      border-collapse: collapse;
      min-width: 300px;
    }

    th, td {
      border: 1px solid black;
      padding: 10px;
      text-align: center;
      font-size: 1rem;
    }

    @media (max-width: 600px) {
      .radio-group,
      .button-group {
        flex-direction: row;
        gap: 15px;
      }

      button {
        font-size: 16px;
        padding: 10px 16px;
      }
    }
  </style>
</head>
<body>

  <h2>Dog Log v2.1</h2>

  <div class="radio-group">
    <label><input type="radio" name="selection" value="Tess" checked> Tess</label>
    <label><input type="radio" name="selection" value="Pickles"> Pickles</label>
  </div>

  <div class="button-group">
    <button onclick="logAction('Pee')">Pee</button>
    <button onclick="logAction('Poo')">Poo</button>
  </div>

  <div class="table-container">
    <table id="dataTable">
      <thead>
        <tr><th>Time</th><th>Output</th><th>X</th></tr>
      </thead>
      <tbody>
        <script>
          for (let i = 0; i < 10; i++) {
            document.write('<tr><td></td><td></td><td></td></tr>');
          }
        </script>
      </tbody>
    </table>
    <button id="deleteRowsBtn" onclick="confirmDeleteRows()">X</button>
  </div>

  <button id="eraseBtn" onclick="confirmErase()" style="display: none;">Erase data</button>

  <script>
    const MAX_ROWS = 10;

    function logAction(action) {
      const dog = document.querySelector('input[name="selection"]:checked').value;
      const table = document.getElementById("dataTable").getElementsByTagName("tbody")[0];
      const rows = table.rows;
      const timestamp = formatDate();
      const entry = [timestamp, `${dog}: ${action}`];

      for (let i = 0; i < rows.length; i++) {
        if (!rows[i].cells[0].innerText) {
          rows[i].cells[0].innerText = timestamp;
          rows[i].cells[1].innerText = `${dog}: ${action}`;
          rows[i].cells[2].innerHTML = '<input type="checkbox" onchange="toggleDeleteButton()">';
          saveToStorage(entry);
          return;
        }
      }
      alert("No empty cells available!");
    }

    function formatDate() {
      const date = new Date();
      const day = date.toLocaleDateString('en-US', { weekday: 'short' });
      let hours = date.getHours();
      const minutes = date.getMinutes().toString().padStart(2, '0');
      const ampm = hours >= 12 ? 'pm' : 'am';
      hours = hours % 12 || 12;
      return `${day} ${hours}:${minutes}${ampm}`;
    }

    function saveToStorage(entry) {
      let data = JSON.parse(localStorage.getItem("tableData")) || [];
      if (data.length >= MAX_ROWS) {
        alert("No more space in storage!");
        return;
      }
      data.push(entry);
      localStorage.setItem("tableData", JSON.stringify(data));
      toggleEraseButton(true);
    }

    function loadFromStorage() {
      const data = JSON.parse(localStorage.getItem("tableData")) || [];
      if (data.length) {
        const tbody = document.getElementById("dataTable").getElementsByTagName("tbody")[0];
        data.forEach((entry, i) => {
          if (tbody.rows[i]) {
            tbody.rows[i].cells[0].innerText = entry[0];
            tbody.rows[i].cells[1].innerText = entry[1];
            tbody.rows[i].cells[2].innerHTML = '<input type="checkbox" onchange="toggleDeleteButton()">';
          }
        });
        toggleEraseButton(true);
      }
    }

    function toggleEraseButton(show) {
      document.getElementById("eraseBtn").style.display = show ? 'inline-block' : 'none';
    }

    function confirmErase() {
      const confirmDelete = confirm("Confirm delete?");
      if (confirmDelete) {
        localStorage.removeItem("tableData");
        clearTable();
        toggleEraseButton(false);
      }
    }

    function clearTable() {
      const rows = document.querySelectorAll("#dataTable tbody tr");
      rows.forEach(row => {
        row.cells[0].innerText = "";
        row.cells[1].innerText = "";
        row.cells[2].innerHTML = "";
      });
      document.getElementById("deleteRowsBtn").style.display = "none";
    }

    function toggleDeleteButton() {
      const checkboxes = document.querySelectorAll("#dataTable tbody input[type='checkbox']");
      const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
      document.getElementById("deleteRowsBtn").style.display = anyChecked ? 'inline-block' : 'none';
    }

    function confirmDeleteRows() {
      const confirmDelete = confirm("Delete selected rows?");
      if (confirmDelete) {
        const rows = Array.from(document.querySelectorAll("#dataTable tbody tr"));
        const newData = [];
        rows.forEach(row => {
          const isChecked = row.cells[2].querySelector("input")?.checked;
          if (!isChecked && row.cells[0].innerText) {
            newData.push([row.cells[0].innerText, row.cells[1].innerText]);
          }
        });
        localStorage.setItem("tableData", JSON.stringify(newData));
        clearTable();
        loadFromStorage();
      } else {
        document.querySelectorAll("#dataTable tbody input[type='checkbox']").forEach(cb => cb.checked = false);
        document.getElementById("deleteRowsBtn").style.display = 'none';
      }
    }

    window.onload = loadFromStorage;
  </script>

</body>
</html>





